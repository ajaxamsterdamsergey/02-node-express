let jwt,contactModel;_722‍.x([["tokenMiddleware",()=>tokenMiddleware],["roleMiddleware",()=>roleMiddleware]]);_722‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_722‍.w("../contacts/contact.model",[["default",["contactModel"],function(v){contactModel=v}]]);


       const tokenMiddleware = async (req, res, next) => {
  const { authorization: token } = req.headers;

  if (!token) {
    res.status(401).send("No token provided");
    return;
  }

  try {
    const { userInfo } = await jwt.verify(token, process.env.JWT_SECRET);
    /* const user = await contactModel.getUserById(id);
        if (!user) {
            res.status(401).send('Invalid token')
        } */
    req.userInfo = { userInfo };
    next();
  } catch (e) {
    _722‍.g.console.log(e);

    res.status(401).send("Invalid token");
  }
};

       const roleMiddleware = (roleList) => (req, res, next) => {
  const { role } = req.userInfo;
  if (!roleList.includes(role)) {
    res.status(403).send("Forbiden");
    return;
  }
  next();
};
